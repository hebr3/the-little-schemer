#lang racket

(define atom?
  (λ (x)
    (and (not (pair? x)) (not (empty? x)))))

(define lat?
  (λ (l)
    (cond
      [(empty? l) #t]
      [(atom? (car l)) (lat? (cdr l))]
      [else #f])))

(define member?
  (λ (a lat)
    (cond
      [(empty? lat) #f]
      [else (or (eq? a (car lat))
                (member? a (cdr lat)))])))

(define rember
  (λ (a lat)
    (cond
      [(empty? lat) '()]
      ;[(eq? a (car lat)) (rember a (cdr lat))] ; remove all
      [(eq? a (car lat)) (cdr lat)]
      [else (cons (car lat)
                  (rember a (cdr lat)))])))

(define firsts
  (λ (lol)
    (cond
      [(empty? lol) '()]
      [else (cons (car (car lol))
                  (firsts (cdr lol)))])))

(define insertR
  (λ (new old lat)
    (cond
      [(empty? lat) '()]
      [(eq? (car lat) old) (cons old (cons new (cdr lat)))]
      [else (cons (car lat) (insertR new old (cdr lat)))])))

(define insertL
  (λ (new old lat)
    (cond
      [(empty? lat) '()]
      [(eq? (car lat) old) (cons new lat)]
      [else (cons (car lat) (insertL new old (cdr lat)))])))

(define subset
  (λ (new old lat)
    (cond
      [(empty? lat) '()]
      [(eq? (car lat) old) (cons new (cdr lat))]
      [else (cons (car lat) (subset new old (cdr lat)))])))

(define subst2
  (λ (new o1 o2 lat)
    (cond
      [(empty? lat) '()]
      [(eq? (car lat) o1) (cons new (cdr lat))]
      [(eq? (car lat) o2) (cons new (cdr lat))]
;      [(or (eq? (car lat) o1) (eq? (car lat) o2)) (cons new (cdr lat))]
      [else (cons (car lat) (subst2 new o1 (cdr lat)))])))

(define multirember
  (λ (a lat)
    (cond
      [(empty? lat) '()]
      [(eq? a (car lat)) (multirember a (cdr lat))] ; remove all
      ;[(eq? a (car lat)) (cdr lat)]
      [else (cons (car lat)
                  (multirember a (cdr lat)))])))

;(multirember 'a '(a b c d a e f))
;(multirember 'cup '(coffee cup tea cup and hick cup))

(define multiinsertR
  (λ (new old lat)
    (cond
      [(empty? lat) '()]
      [(eq? (car lat) old)
       (cons old (cons new (multiinsertR new old (cdr lat))))]
      [else (cons (car lat) (multiinsertR new old (cdr lat)))])))

(multiinsertR 'b 'a '(a c a c))

;(insertR 'topping 'fudge '(ice cream with fudge for desert))
;(insertR 'jalapeno 'and '(tacos tamales and salsa))
;(insertR 'e 'd '(a b c d f g d h))
;
;(subset 'topping 'fudge '(ice cream with fudge for desert))
;(subset 'jalapeno 'and '(tacos tamales and salsa))
;(subset 'e 'd '(a b c d f g d h))
;
;(insertL 'topping 'fudge '(ice cream with fudge for desert))
;(insertL 'jalapeno 'and '(tacos tamales and salsa))
;(insertL 'e 'd '(a b c d f g d h))
;
;(subst2 'vanilla 'chocolate 'banana '(banana ice cream with chocolate toppings))
